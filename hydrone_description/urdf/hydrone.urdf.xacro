<?xml version="1.0"?>
<robot name="hydrone" xmlns:xacro="http://ros.org/wiki/xacro">

    <xacro:property name="namespace" value="$(arg namespace)" />
    <xacro:property name="enable_velodyne" value="$(arg enable_velodyne)"/>
    <xacro:property name="enable_magnet" value="$(arg enable_magnet)"/>
    <xacro:property name="enable_gimbal" value="$(arg enable_gimbal)"/>
    <xacro:property name="enable_rotating_velodyne" value="$(arg enable_rotating_velodyne)" />
    <xacro:property name="fdm_port_in" value="$(arg fdm_port_in)"/>
    <xacro:property name="fdm_port_out" value="$(arg fdm_port_out)"/>
    <xacro:property name="max_range" value="$(arg max_range)"/>
    <xacro:property name="laser_count" value="$(arg laser_count)"/>
    <xacro:property name="arm_length_front_x" value="0.19725" /> <!-- [m] -->
    <xacro:property name="arm_length_back_x" value="0.19725" /> <!-- [m] -->
    <xacro:property name="arm_length_front_y" value="0.19725" /> <!-- [m] -->
    <xacro:property name="arm_length_back_y" value="0.19725" /> <!-- [m] -->

    
    <!-- Collision bitmask - By default collides with everything -->
    <xacro:arg name="collision_bitmask" default="-1" />
    <xacro:property name="collision_bitmask" value="$(arg collision_bitmask)" />

    <!-- Instantiate kopterworx mechanics "mechanics" -->
    <xacro:include filename="$(find hydrone_description)/urdf/hydrone_base.urdf.xacro" />
    <xacro:include filename="$(find rotors_description)/urdf/component_snippets.xacro" />
  
    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>/$(arg namespace)</robotNamespace>
            <robotParam>/$(arg namespace)/robot_description </robotParam>
            <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
        </plugin>
    </gazebo>
  
    <joint name="scan_joint" type="fixed">
        <parent link="${namespace}/base_link"/>
        <child link="base_scan"/>
        <origin xyz="0.0 0 0.05" rpy="0 0 0"/>
    </joint>

    <link name="base_scan">
        <visual>
            <origin xyz="0 0 0.0" rpy="0 0 0"/>
            <geometry>
                <mesh filename="$(find hydrone_description)/meshes/lds.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="dark"/>
        </visual>

        <collision>
            <origin xyz="0.015 0 -0.0065" rpy="0 0 0"/>
            <geometry>
                <cylinder length="0.0315" radius="0.055"/>
            </geometry>
        </collision>

        <inertial>
            <mass value="0.114" />
            <origin xyz="0 0 0" />
            <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                  iyy="0.001" iyz="0.0"
                  izz="0.001" />
        </inertial>
    </link>
  
    <!-- Parameters -->
    <xacro:property name="visual_mesh_file" value="$(find hydrone_description)/meshes/hydrone_base.dae"/>


  
    <!-- Ardupilot plugin 
    NOTE: thrust_multiplier 
      Value is tuned in order for mavros/setpoint_raw/attitude/thrust to reflect real-world behavior. 
    -->
    <xacro:ardupilot
        imu_topic="/${namespace}/imu"
        control_topic="/${namespace}/gazebo/command/motor_speed"
        imu_sensor_name="${namespace}::imu_link::imu_sensor"
        rotor_0_joint="${namespace}::${namespace}/rotor_0_joint"
        rotor_1_joint="${namespace}::${namespace}/rotor_1_joint"
        rotor_2_joint="${namespace}::${namespace}/rotor_2_joint"
        rotor_3_joint="${namespace}::${namespace}/rotor_3_joint"
        thrust_multiplier="1000"
        fdm_port_in="${fdm_port_in}"
        fdm_port_out="${fdm_port_out}">
    </xacro:ardupilot>
  
    <xacro:if value="${enable_velodyne}">

        <xacro:if value="${enable_rotating_velodyne}">
            <xacro:include filename="$(find velodyne_description)/urdf/LiDAR-X-rotating.urdf.xacro"/>
            <xacro:lidar-x
                parent="${namespace}/base_link_inertia"
                name="velodyne"
                topic="${namespace}/velodyne_points"
                hz="10"
                samples="440"
                gpu="false"
                min_range="1" 
                max_range="${max_range}" 
                lasers="32">
                <xacro:insert_block name="horizontal_velodyne_origin"/>
            </xacro:lidar-x>
        </xacro:if>

        <xacro:unless value="${enable_rotating_velodyne}">
            <xacro:include filename="$(find velodyne_description)/urdf/LiDAR-X.urdf.xacro"/>
            <xacro:lidar-x
                parent="${namespace}/base_link_inertia"
                name="velodyne"
                topic="${namespace}/velodyne_points" 
                hz="10"
                samples="440"
                gpu="false"
                min_range="1"
                max_range="${max_range}"
                lasers="32">
                <xacro:insert_block name="horizontal_velodyne_origin"/>
            </xacro:lidar-x>
        </xacro:unless>

    </xacro:if>
  
    <!-- Choose one of the following (and comment out the other): fixed RGBD camera or gimbal with RGBD camera. 
    <xacro:unless value="${enable_gimbal}">
        <xacro:cam
            namespace="$(arg namespace)"
            camera_link="${camera_size}"
            camera_mass="${camera_mass}"
            parent="${namespace}/base_link">
            <xacro:insert_block name="front_facing_camera"/>    
            <xacro:insert_block name="camera_inertia"/>
        </xacro:cam>
    </xacro:unless>

    <xacro:if value="${enable_gimbal}">
        <xacro:gimbal_macro 
            namespace="$(arg namespace)"
            parent="${namespace}/base_link">
            <xacro:insert_block name="front_facing_camera"/>    
        </xacro:gimbal_macro>
    </xacro:if>

    <gazebo reference="${namespace}/base_link">      
        <material>Gazebo/White</material>
    </gazebo>-->	

    <!-- Mount a generic odometry sensor without odometry map (working everywhere). -->
    <xacro:odometry_plugin_macro
        namespace="${namespace}"
        odometry_sensor_suffix="1"
        parent_link="${namespace}/base_link"
        pose_topic="odometry_sensor1/pose"
        pose_with_covariance_topic="odometry_sensor1/pose_with_covariance"
        position_topic="odometry_sensor1/position"
        transform_topic="odometry_sensor1/transform"
        odometry_topic="odometry_sensor1/odometry"
        parent_frame_id="world"
        child_frame_id="${namespace}/odometry_sensor1"
        mass_odometry_sensor="0.00001"
        measurement_divisor="1"
        measurement_delay="0"
        unknown_delay="0.0"
        noise_normal_position="0 0 0"
        noise_normal_quaternion="0 0 0"
        noise_normal_linear_velocity="0 0 0"
        noise_normal_angular_velocity="0 0 0"
        noise_uniform_position="0 0 0"
        noise_uniform_quaternion="0 0 0"
        noise_uniform_linear_velocity="0 0 0"
        noise_uniform_angular_velocity="0 0 0"
        enable_odometry_map="false"
        odometry_map=""
        image_scale="">
        <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" /> <!-- [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] -->
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
    </xacro:odometry_plugin_macro>

    <!-- <arg name="enable_logging" default="false" />
    <arg name="enable_ground_truth" default="true" />
    <arg name="log_file" default="$(arg mav_name)" /> -->

    <!-- Instantiate a controller. -->
    <xacro:controller_plugin_macro namespace="${namespace}" imu_sub_topic="imu" />

    <xacro:default_imu namespace="${namespace}" parent_link="${namespace}/base_link" />

    <xacro:ground_truth_imu_and_odometry namespace="${namespace}" parent_link="${namespace}/base_link" />

    <!-- Set up hydrodynamic plugin given as input parameter 
    <xacro:insert_block name="gazebo"/>-->

    <!-- <xacro:include filename="$(find hydrone_aerial_underwater_description)/urdf/hydrone_aerial_underwater_sensors.xacro" /> -->
    <!-- <xacro:include filename="$(find hydrone_aerial_underwater_description)/urdf/hydrone_aerial_underwater_actuators.xacro" /> -->


</robot>
